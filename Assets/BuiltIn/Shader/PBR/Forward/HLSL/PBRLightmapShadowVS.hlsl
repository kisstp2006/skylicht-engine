// File Generated by Assets/BuildShader.py - source: [PBRVS.d.hlsl : NO_NORMAL_MAP,LM,SHADOW,OPTIMIZE_SHADOW]
struct VS_INPUT
{
	float4 pos: POSITION;
	float3 norm: NORMAL;
	float4 color: COLOR;
	float2 tex0: TEXCOORD0;
	float2 tex1: TEXCOORD1;
	float3 lightmap: LIGHTMAP;
};
struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float2 tex0 : TEXCOORD0;
	float3 tex1 : TEXCOORD1;
	float3 worldNormal: WORLDNORMAL;
	float3 worldViewDir: WORLDVIEWDIR;
	float4 viewPosition: VIEWPOSITION;
	float3 worldPosition: WORLDPOSITION;
	float3 depth: DEPTH;
	float4 shadowCoord: SHADOWCOORD;
};
cbuffer cbPerObject
{
	float4x4 uMvpMatrix;
	float4x4 uWorldMatrix;
	float4 uCameraPosition;
	float4 uUVScale;
	float4x4 uShadowMatrix;
};
VS_OUTPUT main(VS_INPUT input)
{
	VS_OUTPUT output;
	output.pos = mul(input.pos, uMvpMatrix);
	output.tex0 = input.tex0 * uUVScale.xy + uUVScale.zw;
	output.tex1 = input.lightmap;
	float4 worldPos = mul(input.pos, uWorldMatrix);
	float4 worldViewDir = normalize(uCameraPosition - worldPos);
	float4 worldNormal = mul(float4(input.norm.xyz, 0.0), uWorldMatrix);
	output.worldPosition = worldPos.xyz;
	output.worldNormal = normalize(worldNormal.xyz);
	output.depth = uCameraPosition.xyz - worldPos.xyz;
	output.shadowCoord = mul(float4(worldPos.xyz, 1.0), uShadowMatrix);
	output.worldViewDir = worldViewDir.xyz;
	output.viewPosition = output.pos;
	return output;
}

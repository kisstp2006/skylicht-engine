// File Generated by Assets/BuildShader.py - source: [SGLitFS.d.hlsl : NO_NORMAL_MAP,NO_SPECGLOSS,INSTANCING,CUTOFF]
Texture2D uTexDiffuse : register(t0);
SamplerState uTexDiffuseSampler : register(s0);
struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float2 tex0 : TEXCOORD0;
	float3 worldNormal: WORLDNORMAL;
	float3 worldViewDir: WORLDVIEWDIR;
	float3 worldLightDir: WORLDLIGHTDIR;
	float3 worldTangent: WORLDTANGENT;
	float3 worldBinormal: WORLDBINORMAL;
	float tangentw : TANGENTW;
};
cbuffer cbPerFrame
{
	float4 uLightColor;
	float4 uColor;
	float2 uSpecGloss;
	float2 uLightMul;
	float uCutoff;
	float4 uSHConst[4];
};
static const float gamma = 2.2;
static const float invGamma = 1.0 / 2.2;
float3 sRGB(float3 color)
{
	return pow(color, gamma);
}
float3 linearRGB(float3 color)
{
	return pow(color, invGamma);
}
float3 shAmbient(float3 n)
{
	float3 ambientLighting = uSHConst[0].xyz +
		uSHConst[1].xyz * n.y +
		uSHConst[2].xyz * n.z +
		uSHConst[3].xyz * n.x;
	return ambientLighting * 0.75;
}
static const float PI = 3.1415926;
float4 main(PS_INPUT input) : SV_TARGET
{
	float4 diffuseMap = uTexDiffuse.Sample(uTexDiffuseSampler, input.tex0) * uColor;
	if (diffuseMap.a < uCutoff)
		discard;
	float3 specMap = float3(uSpecGloss, 1.0);
	float3 n = input.worldNormal;
	float3 ambientLighting = shAmbient(n);
	ambientLighting = sRGB(ambientLighting);
	float3 diffuseColor = sRGB(diffuseMap.rgb);
	float3 lightColor = sRGB(uLightColor.rgb);
	float spec = specMap.r;
	float gloss = specMap.g;
	float NdotL = max(dot(n, input.worldLightDir), 0.0);
	float3 directionalLight = NdotL * lightColor;
	float3 color = directionalLight * diffuseColor * 0.3 * uLightMul.y;
	float3 specularColor = float3(0.5, 0.5, 0.5);
	float3 H = normalize(input.worldLightDir + input.worldViewDir);
	float NdotE = max(0.0,dot(n, H));
	float specular = pow(NdotE, 10.0 + 100.0 * gloss) * spec;
	color += specular * specularColor * uLightMul.x;
	color += ambientLighting * diffuseColor / PI;
	return float4(color, diffuseMap.a);
}

// File Generated by Assets/BuildShader.py - source: [BakeDirectionalLightFS.d.hlsl : LM,NORMAL_MAP]
Texture2D uShadowMap : register(t0);
SamplerState uShadowMapSampler : register(s0);
Texture2D uTexNormalMap : register(t1);
SamplerState uTexNormalMapSampler : register(s1);
struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float3 worldNormal: WORLDNORMAL;
	float3 worldPosition: WORLDPOSITION;
	float2 tex0: TEXCOORD0;
	float3 worldTangent: WORLDTANGENT;
	float3 worldBinormal: WORLDBINORMAL;
	float tangentw : TANGENTW;
};
cbuffer cbPerFrame
{
	float4 uLightColor;
	float4 uLightDirection;
	float4 uShadowBias;
	float4x4 uShadowMatrix;
};
float shadowSimple(const float4 shadowCoord)
{
	int id = 0;
	float visible = 1.0;
	float depth = 0.0;
	float result = 0.0;
	float3 shadowUV = shadowCoord.xyz / shadowCoord.w;
	depth = shadowUV.z;
	depth -= uShadowBias.x;
	float2 uv = shadowUV.xy;
	float size = 1.0/2048;
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(-1, -1) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(0, -1) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(1, -1) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(-1, 0) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(0, 0) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(1, 0) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(-1, 1) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(0, 1) * size, 0).r));
	result += (step(depth, uShadowMap.SampleLevel(uShadowMapSampler, uv + float2(1, 1) * size, 0).r));
	return result / 9.0;
}
float4 main(PS_INPUT input) : SV_TARGET
{
	float4 shadowCoord = mul(float4(input.worldPosition, 1.0), uShadowMatrix);
	float visibility = shadowSimple(shadowCoord);
	float3 normalMap = uTexNormalMap.Sample(uTexNormalMapSampler, input.tex0).xyz;
	float3x3 rotation = float3x3(input.worldTangent, input.worldBinormal, input.worldNormal);
	float3 localCoords = normalMap * 2.0 - float3(1.0, 1.0, 1.0);
	localCoords.y *= input.tangentw;
	float3 worldNormal = normalize(mul(localCoords, rotation));
	float NdotL = max(dot(worldNormal, uLightDirection.xyz), 0.0);
	float3 directionalLightColor = NdotL * uLightColor.rgb / 3.0;
	return float4(directionalLightColor * visibility, visibility);
}

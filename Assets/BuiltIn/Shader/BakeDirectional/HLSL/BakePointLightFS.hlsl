// File Generated by Assets/BuildShader.py - source: [BakePointLightFS.d.hlsl : _]
TextureCube uPointLightShadowMap : register(t0);
SamplerState uPointLightShadowMapSampler : register(s0);
struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float3 worldNormal: WORLDNORMAL;
	float3 worldPosition: WORLDPOSITION;
	float2 tex0: TEXCOORD0;
};
cbuffer cbPerFrame
{
	float4 uLightPosition;
	float4 uLightAttenuation;
	float4 uLightColor;
};
float3 pointlightShadow(
	const float3 position,
	const float3 normal,
	const float3 camPosition,
	const float4 lightColor,
	const float3 lightPosition,
	const float4 lightAttenuation,
	const float spec,
	const float gloss,
	const float3 specColor)
{
	float3 direction = lightPosition - position;
	float distance = length(direction);
	float attenuation = max(0.0, 1.0 - (distance * lightAttenuation.y)) * lightColor.a;
	float3 lightDir = normalize(direction);
	float NdotL = max(0.0, dot(lightDir, normal));
	float3 v = camPosition - position;
	float3 viewDir = normalize(v);
	float3 H = normalize(direction + viewDir);
	float NdotE = max(0.0,dot(normal, H));
	float specular = pow(NdotE, 10.0 + 100.0 * gloss) * spec;
	float bias = 0.05;
	float d = distance - bias;
	float shadow = 0.0;
	float samples = 2.0;
	float offset = 0.01;
	float delta = offset / (samples * 0.5);
	float3 fragToLight;
	float x = -offset;
	float y = -offset;
	float z = -offset;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	z = -offset;
	y += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	x += delta;
	y = -offset;
	z = -offset;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	z = -offset;
	y += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	z += delta;
	{fragToLight = -lightDir + float3(x, y, z);shadow += step(uPointLightShadowMap.SampleLevel(uPointLightShadowMapSampler, fragToLight, 0).r, d);};
	shadow /= (samples * samples * samples);
	shadow = max(1.0 - shadow, 0.0);
	return (lightColor.rgb * NdotL + specular * specColor) * shadow * attenuation;
}
float4 main(PS_INPUT input) : SV_TARGET
{
	float3 worldNormal = input.worldNormal;
	float3 directionalLightColor = pointlightShadow(
		input.worldPosition,
		worldNormal,
		float3(0.0, 100.0, 0.0),
		uLightColor,
		uLightPosition.xyz,
		uLightAttenuation,
		0.0,
		0.1,
		float3(1.0, 1.0, 1.0));
	return float4(directionalLightColor / 3.0, 1.0);
}

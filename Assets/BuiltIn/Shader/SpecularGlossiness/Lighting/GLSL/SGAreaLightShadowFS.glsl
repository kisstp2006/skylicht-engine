// File Generated by Assets/BuildShader.py - source: [SGAreaLightFS.d.glsl : SHADOW,SHADOW_SIZE 512.0,SHADOW_BIAS 0.005]
precision highp float;
precision highp sampler2D;
precision highp sampler2DArray;
uniform sampler2D uTexPosition;
uniform sampler2D uTexNormal;
uniform sampler2D uTexData;
uniform sampler2D uShadowMap;
uniform vec4 uCameraPosition;
uniform vec4 uLightPosition;
uniform vec3 uLightDirX;
uniform vec3 uLightDirY;
uniform vec2 uLightSize;
uniform vec4 uLightColor;
uniform mat4 uShadowMatrix;
in vec2 varTexCoord0;
out vec4 FragColor;
float shadowSimple(const vec4 shadowCoord)
{
	int id = 0;
	float visible = 1.0;
	float depth = 0.0;
	float result = 0.0;
	vec3 shadowUV = shadowCoord.xyz / shadowCoord.w;
	depth = shadowUV.z;
	depth -= 0.005;
	vec2 uv = shadowUV.xy;
	float size = 1.0/512.0;
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(-1, -1) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(0, -1) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(1, -1) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(-1, 0) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(0, 0) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(1, 0) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(-1, 1) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(0, 1) * size), 0.0).r));
	result += (step(depth, textureLod(uShadowMap, vec2(uv + vec2(1, 1) * size), 0.0).r));
	return result / 9.0;
}
vec3 integrateEdge(vec3 v1, vec3 v2)
{
    float x = dot(v1, v2);
    float y = abs(x);
    float a = 0.8543985 + (0.4965155 + 0.0145206*y)*y;
    float b = 3.4175940 + (4.1616724 + y)*y;
    float v = a / b;
    float theta_sintheta = (x > 0.0) ? v : 0.5*inversesqrt(max(1.0 - x*x, 1e-7)) - v;
    return cross(v1, v2)*theta_sintheta;
}
vec3 arealightShadow(
	const vec3 position,
	const vec3 normal,
	const vec3 camPosition,
	const vec4 lightColor,
	const vec3 lightPosition,
	const vec3 lightDirX,
	const vec3 lightDirY,
	const vec2 lightSize)
{
	vec3 v0 = lightPosition - lightDirX * lightSize.x - lightDirY * lightSize.y;
	vec3 v1 = lightPosition + lightDirX * lightSize.x - lightDirY * lightSize.y;
    vec3 v2 = lightPosition + lightDirX * lightSize.x + lightDirY * lightSize.y;
    vec3 v3 = lightPosition - lightDirX * lightSize.x + lightDirY * lightSize.y;
    vec3 L[4];
    L[0] = (v0 - position);
    L[1] = (v1 - position);
    L[2] = (v2 - position);
    L[3] = (v3 - position);
	L[0] = normalize(L[0]);
    L[1] = normalize(L[1]);
    L[2] = normalize(L[2]);
    L[3] = normalize(L[3]);
	vec3 sum = vec3(0.0, 0.0, 0.0);
	sum += integrateEdge(L[0], L[1]);
	sum += integrateEdge(L[1], L[2]);
	sum += integrateEdge(L[2], L[3]);
	sum += integrateEdge(L[3], L[0]);
	float len = length(sum);
	vec3 lightNormal = -normalize(cross(v1 - v0, v3 - v0));
	len = len * max(dot(normal, lightNormal), 0.0);
	vec4 shadowCoord = uShadowMatrix * vec4(position, 1.0);
	len = len * shadowSimple(shadowCoord);
	return max(0.0, len) * lightColor.rgb * lightColor.a;
}
void main(void)
{
	vec3 position = texture(uTexPosition, varTexCoord0.xy).xyz;
	vec3 normal = texture(uTexNormal, varTexCoord0.xy).xyz;
	vec3 lightColor = arealightShadow(
		position,
		normal,
		uCameraPosition.xyz,
		uLightColor,
		uLightPosition.xyz,
		uLightDirX,
		uLightDirY,
		uLightSize);
	FragColor = vec4(lightColor, 1.0);
}

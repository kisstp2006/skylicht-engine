// File Generated by Assets/BuildShader.py - source: [SGSpotLightFS.d.glsl : SHADOW]
precision highp float;
precision highp sampler2D;
precision highp sampler2DArray;
uniform sampler2D uTexPosition;
uniform sampler2D uTexNormal;
uniform sampler2D uTexData;
uniform samplerCube uPointLightShadowMap;
uniform vec4 uCameraPosition;
uniform vec4 uLightPosition;
uniform vec4 uLightDirection;
uniform vec4 uLightAttenuation;
uniform vec4 uLightColor;
in vec2 varTexCoord0;
out vec4 FragColor;
vec3 spotlightShadow(
	const vec3 position,
	const vec3 normal,
	const vec3 camPosition,
	const vec4 lightColor,
	const vec3 lightPosition,
	const vec4 lightAttenuation,
	const float spec,
	const float gloss,
	const vec3 specColor)
{
	vec3 direction = lightPosition - position;
	float distance = length(direction);
	float attenuation = max(0.0, 1.0 - (distance * lightAttenuation.z * 0.5)) * lightColor.a;
	vec3 lightDir = normalize(direction);
	float spotDot = dot(lightDir, uLightDirection.xyz);
	if (spotDot < lightAttenuation.x)
	{
		attenuation = 0.0;
	}
	else
	{
		float spotValue = smoothstep(lightAttenuation.x, lightAttenuation.y, spotDot);
		attenuation *= pow(spotValue, lightAttenuation.w);
	}
	float NdotL = max(0.0, dot(lightDir, normal));
	vec3 v = camPosition - position;
	vec3 viewDir = normalize(v);
	vec3 H = normalize(direction + viewDir);
	float NdotE = max(0.0,dot(normal, H));
	float specular = pow(NdotE, 100.0 * gloss) * spec;
	float bias = 0.2;
	float d = distance - bias;
	float shadow = 0.0;
	float samples = 2.0;
	float offset = 0.01;
	float delta = offset / (samples * 0.5);
	vec3 fragToLight;
	float x = -offset;
	float y = -offset;
	float z = -offset;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	z += delta;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	z = -offset;
	y += delta;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	z += delta;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	x += delta;
	y = -offset;
	z = -offset;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	z += delta;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	z = -offset;
	y += delta;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	z += delta;
	{fragToLight = -lightDir + vec3(x, y, z);shadow += step(textureLod(uPointLightShadowMap, fragToLight, 0.0).r, d);};
	shadow /= (samples * samples * samples);
	shadow = max(1.0 - shadow, 0.0);
	return (lightColor.rgb * NdotL + specular * specColor) * attenuation * shadow;
}
void main(void)
{
	vec3 position = texture(uTexPosition, varTexCoord0.xy).xyz;
	vec3 normal = texture(uTexNormal, varTexCoord0.xy).xyz;
	vec3 data = texture(uTexData, varTexCoord0.xy).rgb;
	vec3 lightColor = spotlightShadow(
		position,
		normal,
		uCameraPosition.xyz,
		uLightColor,
		uLightPosition.xyz,
		uLightAttenuation,
		data.r,
		data.g,
		vec3(1.0, 1.0, 1.0));
	FragColor = vec4(lightColor, 1.0);
}
